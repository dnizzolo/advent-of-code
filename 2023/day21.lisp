(defpackage :aoc2023.21
  (:documentation "Step Counter.")
  (:local-nicknames (:q :queue))
  (:use :cl :aoc.utils))

(in-package :aoc2023.21)

(defun read-garden (&optional (relative-pathname #p"2023/inputs/day21.txt"))
  (let* ((filename (asdf:system-relative-pathname :advent-of-code relative-pathname))
         (lines (uiop:read-file-lines filename)))
    (make-array (list (length lines) (length (first lines)))
                :element-type 'character
                :initial-contents lines)))

(defvar *the-grid* nil)

(defun visit (start-x start-y steps)
  (let ((seen (make-hash-table :test #'equal))
        (queue (q:make-queue))
        (result (make-hash-table :test #'equal)))
    (q:enqueue queue (cons steps (cons start-x start-y)))
    (loop until (q:empty-p queue)
          do (destructuring-bind (remaining-steps . current)
                 (q:dequeue queue)
               (when (zerop (mod remaining-steps 2))
                 (setf (gethash current result) t))
               (unless (zerop remaining-steps)
                 (loop for (dx . dy) in '((0 . 1) (0 . -1) (-1 . 0) (1 . 0))
                       for nx = (+ (car current) dx)
                       for ny = (+ (cdr current) dy)
                       for neighbor = (cons nx ny)
                       when (and (array-in-bounds-p *the-grid* nx ny)
                                 (char/= #\# (aref *the-grid* nx ny))
                                 (not (gethash neighbor seen)))
                         do (setf (gethash neighbor seen) t)
                            (q:enqueue queue (cons (1- remaining-steps) neighbor))))))
    (hash-table-count result)))

(defun day21 ()
  (let ((*the-grid* (read-garden)))
    (multiple-value-bind (sx sy) (position-2d #\S *the-grid*)
      (values (visit sx sy 64)
              (let* ((size (array-dimension *the-grid* 0))
                     (grid-width (1- (floor 26501365 size)))
                     (odd (expt (1+ (* 2 (floor grid-width 2))) 2))
                     (even (expt (* 2 (floor (1+ grid-width) 2)) 2))
                     (odd-points (visit sx sy (1+ (* 2 size))))
                     (even-points (visit sx sy (* 2 size)))
                     (corner-t (visit (1- size) sy (1- size)))
                     (corner-r (visit sx 0 (1- size)))
                     (corner-b (visit 0 sy (1- size)))
                     (corner-l (visit sx (1- size) (1- size)))
                     (small-tr (visit (1- size) 0 (1- (floor size 2))))
                     (small-tl (visit (1- size) (1- size) (1- (floor size 2))))
                     (small-br (visit 0 0 (1- (floor size 2))))
                     (small-bl (visit 0 (1- size) (1- (floor size 2))))
                     (large-tr (visit (1- size) 0 (1- (floor (* 3 size) 2))))
                     (large-tl (visit (1- size) (1- size) (1- (floor (* 3 size) 2))))
                     (large-br (visit 0 0 (1- (floor (* 3 size) 2))))
                     (large-bl (visit 0 (1- size) (1- (floor (* 3 size) 2)))))
                (+ (* odd odd-points)
                   (* even even-points)
                   corner-t corner-r corner-b corner-l
                   (* (1+ grid-width)
                      (+ small-tr small-tl small-br small-bl))
                   (* grid-width
                      (+ large-tr large-tl large-br large-bl))))))))

(define-test (= 3830) (= 637087163925555))
